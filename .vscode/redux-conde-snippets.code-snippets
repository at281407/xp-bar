{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Import_Connect": {
		"prefix": "irc",
		"scope": "javascript,typescript",
		"body": "import {connect} from 'react-redux';",
		"description": "Import connect from react-redux"
	},
	"Export_Connect": {
		"prefix": "edc",
		"scope": "javascript,typescript",
		"body": [
			"export default connect(",
			"\t(state) => ({",
			"\t\t// Map state to props",
			"\t}),",
			"\t{",
			"\t\t// Map actions/middleware to props",
			"\t}",
			")($CLIPBOARD);"
		],
		"description": "Export component via connect"
	},
	"New_Action_Type": {
		"prefix": "at",
		"scope": "javascript,typescript",
		"body": "export const ${1:actionType} = '${1:actionType}';",
		"description": "New redux action type"
	},
	"NEW_ACTION": {
		"prefix": "nact",
		"scope": "javascript,typescript",
		"body": [
			"import * as types from '../actionTypes'",
			"",
			"export const $TM_FILENAME_BASE = () => dispatch => {",
			"\treturn dispatch({",
			"\t\ttype: types.${1:actionType}",
			"\t});",
			"}"
		],
		"description": "New redux action template"
	},
	"NEW_REDUCER": {
		"prefix": "nred",
		"scope": "javascript,typescript",
		"body": [
			"import { ACTION_TYPE } from '../actions/actionTypes';",
			"",
			"let initState = {",
			"\t",
			"}",
			"",
			"export const $TM_FILENAME_BASE = (state = initState, action) => {",
			"\tswitch (action.type) {",
			"\tcase ACTION_TYPE:",
			"\t\treturn {",
			"\t\t\t...state,",
			"\t\t\t// Deliver payload from action",
			"\t\t}",
			"\tdefault:",
			"\t\treturn state",
			"\t}",
			"};",
			"",
			"export default $TM_FILENAME_BASE;"
		],
		"description": "New redux reducer template"
	}
}